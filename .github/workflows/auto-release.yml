name: Auto Release

on:
  push:
    branches:
      - release
      - release/*
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Windows executables
      run: npm run dist
      
    - name: List Windows build output
      run: |
        echo "Windows build output:"
        dir dist
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-executables
        path: dist/
        
  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build macOS executables
      run: npm run dist
      
    - name: List macOS build output
      run: |
        echo "macOS build output:"
        ls -la dist/
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-executables
        path: dist/
        
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Linux executables
      run: npm run dist
      
    - name: List Linux build output
      run: |
        echo "Linux build output:"
        ls -la dist/
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-executables
        path: dist/

  auto-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"
        
    - name: Check if release exists
      id: check_release
      run: |
        if git tag -l "${{ steps.version.outputs.version }}" | grep -q "${{ steps.version.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.version.outputs.version }} does not exist"
        fi
        
    - name: Download all artifacts
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Organize release assets
      if: steps.check_release.outputs.exists == 'false'
      run: |
        mkdir -p release-assets
        
        echo "🔍 Available artifacts:"
        find artifacts -type f -name "*" | sort
        
        # Copy all build artifacts to release-assets
        find artifacts -type f \( -name "*.exe" -o -name "*.zip" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release-assets/ \;
        
        echo "📦 Release assets organized:"
        ls -lah release-assets/
        
    - name: Create Release
      if: steps.check_release.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "m3u-player ${{ steps.version.outputs.version }}"
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          # 🎉 m3u-player ${{ steps.version.outputs.version }}
          
          A modern IPTV player built with Electron that bypasses CORS limitations.
          
          ## 📦 Downloads
          
          Choose the appropriate file for your operating system:
          
          - 🪟 **Windows**: Download `.exe` or `.zip` files
          - 🍎 **macOS**: Download `.dmg` files (Intel and Apple Silicon supported)
          - 🐧 **Linux**: Download `.AppImage`, `.deb`, or `.rpm` files
          
          ## 🚀 Quick Install
          
          - **Windows**: Run the `.exe` installer
          - **macOS**: Open `.dmg` and drag to Applications
          - **Linux**: Make `.AppImage` executable and run
          
          ---
          🤖 *Auto-generated release*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}