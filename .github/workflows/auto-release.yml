name: Auto Release

on:
  push:
    branches:
      - release
      - release/*
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    - run: npm ci
    - run: npm run dist
    - uses: actions/upload-artifact@v4
      with:
        name: windows-executables
        path: dist/
        
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    - run: npm ci
    - run: npm run dist
    - uses: actions/upload-artifact@v4
      with:
        name: macos-executables
        path: dist/
        
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    - run: npm ci
    - run: npm run dist
    - uses: actions/upload-artifact@v4
      with:
        name: linux-executables
        path: dist/

  auto-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"
        
    - name: Check if release exists
      id: check_release
      run: |
        if git tag -l "${{ steps.version.outputs.version }}" | grep -q "${{ steps.version.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.version.outputs.version }} does not exist"
        fi
        
    - name: Download all artifacts
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Organize release assets
      if: steps.check_release.outputs.exists == 'false'
      run: |
        mkdir -p release-assets
        VERSION=$(echo "${{ steps.version.outputs.version }}" | sed 's/^v//')
        
        echo "🔍 Searching for build artifacts..."
        find artifacts -type f -name "*" | head -20
        
        # Find and organize Windows files
        find artifacts/windows-executables -name "*.exe" -exec cp {} release-assets/ \;
        find artifacts/windows-executables -name "*.zip" -exec cp {} release-assets/ \;
        find artifacts/windows-executables -name "*.msi" -exec cp {} release-assets/ \; 2>/dev/null || true
        
        # Find and organize macOS files  
        find artifacts/macos-executables -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts/macos-executables -name "*.zip" -exec cp {} release-assets/ \;
        
        # Find and organize Linux files
        find artifacts/linux-executables -name "*.AppImage" -exec cp {} release-assets/ \;
        find artifacts/linux-executables -name "*.deb" -exec cp {} release-assets/ \;
        find artifacts/linux-executables -name "*.rpm" -exec cp {} release-assets/ \;
        find artifacts/linux-executables -name "*.tar.gz" -exec cp {} release-assets/ \;
        
        # List organized files with sizes
        echo "📦 Release assets organized:"
        ls -lah release-assets/
        
        # Count files per platform
        echo "📊 Asset summary:"
        echo "Windows: $(find release-assets -name "*.exe" -o -name "*.zip" | grep -E "\.(exe|zip)$" | wc -l) files"
        echo "macOS: $(find release-assets -name "*.dmg" | wc -l) files"  
        echo "Linux: $(find release-assets -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" | wc -l) files"
        
    - name: Create Release
      if: steps.check_release.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "m3u-player ${{ steps.version.outputs.version }}"
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          # 🎉 m3u-player ${{ steps.version.outputs.version }}
          
          A modern IPTV player built with Electron that bypasses CORS limitations.
          
          ## 📦 Download for your platform
          
          ### 🪟 Windows
          - **`m3u-player-Setup-${{ steps.version.outputs.version }}.exe`** - NSIS installer (recommended)
          - **`m3u-player-${{ steps.version.outputs.version }}-win.zip`** - Portable version
          
          ### 🍎 macOS
          - **`m3u-player-${{ steps.version.outputs.version }}.dmg`** - Disk image (recommended)
          - **`m3u-player-${{ steps.version.outputs.version }}-mac.zip`** - ZIP archive
          - Universal builds supporting both Intel and Apple Silicon
          
          ### 🐧 Linux
          - **`m3u-player-${{ steps.version.outputs.version }}.AppImage`** - Universal executable (recommended)
          - **`m3u-player_${{ steps.version.outputs.version }}_amd64.deb`** - Debian/Ubuntu package
          - **`m3u-player-${{ steps.version.outputs.version }}.x86_64.rpm`** - Red Hat/Fedora package
          
          ## 🚀 Installation Instructions
          
          ### Windows
          1. Download the `.exe` installer
          2. Run as administrator if needed
          3. Follow installation wizard
          
          ### macOS
          1. Download the `.dmg` file
          2. Open and drag to Applications folder
          3. Right-click → Open if security warning appears
          
          ### Linux
          1. Download the `.AppImage` file
          2. Make executable: `chmod +x m3u-player-*.AppImage`
          3. Run directly: `./m3u-player-*.AppImage`
          
          ## 🔧 System Requirements
          
          - **Windows**: Windows 10 or later (x64/x86)
          - **macOS**: macOS 10.14+ (Intel/Apple Silicon)
          - **Linux**: Most modern distributions (x64)
          
          ---
          
          🤖 *This release was automatically generated from branch push*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}